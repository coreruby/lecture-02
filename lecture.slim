section.center data-background="#000"
  h1.white Methods & Procs

section
  h2 Prelude
  p We have a facebook group!

section
  h2 Prelude
  p Which is really funny, cause I ain't got one

section.center
  img.inline src="img/troll.png"

section
  h2 Prelude
  p The class has a website
  p: a href="http://coreruby.github.io" http://coreruby.github.io

section
  h2 Prelude
  p The first lecture is already online
  ul
    li: a href="http://coreruby.github.io/lecture-01" http://coreruby.github.io/lecture-01

section
  h2 Prelude
  p The website and the lectures are open source
  ul
    li: a href="https://github.com/coreruby" https://github.com/coreruby

section.center
  p I need your help

section
  h2 Prelude
  p Send a pull request for a typo

section
  h2 Prelude
  p Send a pull request for a better explanation

section
  h2 Prelude
  p Send a pull request for everything

section.center data-background="#000"
  p: img.inline src="https://avatars1.githubusercontent.com/u/8987550?v=2&s=256"

section
  h2 Method
  p Defined by the keyword def
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
      end

section
  h2 Method
  p Can hold local variables
  pre: code.ruby
    '
      def just_hanging_around_creating_local_variables
        a_local_variable = 42
      end

      >> just_hanging_around_creating_local_variables
      => 42

section
  h2 Method
  p Local variables aren't visible outside the method
  pre: code.ruby
    '
      def just_hanging_around_creating_local_variables
        a_local_variable = 42
      end

      >> just_hanging_around_creating_local_variables
      => 42
      >> a_local_variable
      NameError: undefined local variable or method `a_local_variable' for main:Object

section
  h2 Method
  p Returns a value
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
        return :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Returns a value early
  pre: code.ruby
    '
      def eat(food)
        return :oh_well if food == :potato

        3.times { nom }
        return :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Returns a value implicitly
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
        :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Always returns a value
  pre: code.ruby
    '
      def nothing
      end

      >> nothing
      => nil

section
  h2 Method
  p Can take no arguments
  pre: code.ruby
    '
      def make_some_noise
        scream
        shout
        let_it_all_out
      end

      >> make_some_noise
      => :it_sounds_like_a_cheesy_pop_song_broski

section
  h2 Method
  p Can take many arguments
  pre: code.ruby
    '
      def eat(first, second, third)
        nom first
        nom second
        nom third
      end

section
  h2 Method
  p Can take any arguments
  pre: code.ruby
    '
      def eat(*meals)
        meals.each { |meal| nom meal }
      end

      >> eat(:breakfast, :lunch, :dunner)
      => [:breakfast, :lunch, :dinner]

      >> eat(:breakfast)
      => [:breakfast]

section
  h2 Method
  p meals is an Array of the given arguments
  pre: code.ruby
    '
      def eat(*meals)
        meals.each { |meal| nom meal }
      end

      >> eat(:breakfast, :lunch, :dunner)
      => [:breakfast, :lunch, :dinner]

      >> eat(:breakfast)
      => [:breakfast]

section.center data-background="#000"
  p.white The name comes from the squashed-bug appearance on many early line printers

section.center data-background="#000"
  p.white True story

section.center data-background="#000"
  p.white Глей с'я ко стаа

section.center data-background="#000"
  p.white БРАТ

section
  h2 Method
  p The splat operator can get a little weird
  pre: code.ruby
    '
      def eat(first, *rest)
        nom first
        rest.each { |meal| nom meal }
      end

section
  h2 Method
  p Well, that's not so weird
  pre: code.ruby
    '
      def eat(first, *rest)
        nom first
        rest.each { |meal| nom meal }
      end

      >> eat(:breakfast)
      => [:breakfast]

      >> eat(:breakfast, :lunch)
      => [:breakfast, :lunch]

section
  h2 Method
  p Well, look at this
  pre.fragment: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatoes, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p Not so weird?
  pre: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatoes, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p Okay, okay, okay
  pre: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatoes, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p You asked for it
  pre: code.ruby
    '
      def eat(first, *in_between, last)
        gently_taste first
        in_between.each { |meal| nom meal }
        squash_with_your_face last
      end

      >> eat(:potatoes, :ice_cream)
      => ???

section.center data-background="#000"
  blockquote.white With powerful operators come messy semantics.
  p.white Benjamin Franklin

section
  h2 Method
  p Can provide default values for arguments
  pre: code.ruby
    '
      def eat(meal = :bread)
        nom meal
      end

      >> eat
      => :bread

      >> eat :salad
      => :salad

section.center data-background="#000"
  blockquote.white The default arguments suffer the same splat heart ache.
  p.white Marvin Gaye

section.center data-background="#000"
  p.white Either default the last argument or don't default at all

section
  h2 Method
  p Can yield a block
  pre: code.ruby
    '
      def log(level)
        if level > 0
          message = yield
          puts message
        end
      end

      >> log(1) { 'FIRE!' }
      FIRE!
      => nil

      >> log(0) { 'Wha?' }
      => nil

section
  h2 Method
  p Can yield a block
  pre: code.ruby
    '
      def log(level)
        if level > 0
          message = yield
          puts message
        end
      end

      >> log(1) { 'FIRE!' }
      FIRE!
      => nil

      >> log(0) { 'Wha?' }
      => nil

section
  h2 Method
  p Can ask if a block is given
  pre: code.ruby
    '
      def log(level, message = nil)
        if level > 0
          puts block_given? ? yield : message
        end
      end

      >> log(1) do
      ..   'FIRE!'
      .. end
      FIRE!
      => nil

      >> log(1, 'FIRE!')
      FIRE!
      => nil

section
  h2 Method
  p Can yield arguments into a block
  pre: code.ruby
    '
      def create(klass)
        yield klass.new
      end

      >> create Array do |a|
      ..   a << 42
      ..   a.include? 42
      .. end
      => true

section
  h2 Method
  p Can yield many arguments into a block
  pre: code.ruby
    '
      def create(*classes)
        yield classes.map(&:new)
      end

      >> create Array, Hash do |array, hash|
      ..   puts array.class, hash.class
      .. end
      Array
      Hash
      => true

section
  h2 Method
  p Can yield many arguments into a block
  pre: code.ruby
    '
      def create(*classes)
        yield classes.map(&:new)
      end

      >> create Array, Hash do |array, hash|
      ..   puts array.class, hash.class
      .. end
      Array
      Hash
      => true

      >> create Array, Hash do |array|
      ..   puts array.class
      .. end
      Array
      => true

section.center data-background="#000"
  p.white Everything in Ruby is an object

section
  h2 Method
  p Can yield many arguments into a block
  pre: code.ruby
    '
      def create(*classes, &block)
        block.call(*classes.map(&:new))
      end

      >> create Array, Hash do |array, hash|
      ..   puts array.class, hash.class
      .. end
      Array
      Hash
      => true

      >> create Array, Hash do |array|
      ..   puts array.class
      .. end
      Array
      => true

section
  h2 Proc
  p Block are an instance of the class Proc
  pre: code.ruby
    '
      def create_block(&new_block)
        new_block.class
      end

      >> create_block { nil }.class
      => Proc

section
  h2 Proc
  p Can be created manually
  pre: code.ruby
    '
      p = proc { |*args| nil }

      >> p.call
      => nil

section
  h2 Proc
  p Can be created manually
  pre: code.ruby
    '
      p = proc do |*args|
        nil
      end

      >> p.call
      => nil

section
  h2 Proc
  p Can be called with #call #[] and #.()
  pre: code.ruby
    '
      p = proc { |*args| nil }

      >> p.call
      => nil

      >> p[]
      => nil

      >> p.()
      => nil

section.center data-background="#000"
  p.white #call

section
  h2 Proc#lambda?
  p There is a special proc called lambda

section
  h2 Proc#lambda?
  p There is a special proc called lambda
  pre: code.ruby
    '
      callable = lambda { |arg| arg }

      >> callable.call(arg)
      => nil

section
  h2 Proc#lambda?
  p There is a special proc called lambda
  pre: code.ruby
    '
      callable = -> arg { arg }

      >> callable.call(arg)
      => nil

section
  h2 Proc#lambda?
  p There is a special proc called lambda
  pre: code.ruby
    '
      callable = -> (arg) { arg }

      >> callable.call(arg)
      => nil

section.center data-background="#000"
  blockquote.white Semantics are important.
  p.white Goran Bregovic

section
  h2 Proc#lambda?
  pre: code.ruby
    '
      >> p = proc { |a, b, c| p a, b, c }
      => #<Proc:0x007fd891a9ff30@(irb):6>
      >> p.call 1
      1
      nil
      nil
      => [1, nil, nil]
      >> l = lambda { |a, b, c| p a, b, c }
      => #<Proc:0x007fd891a86238@(irb):8 (lambda)>
      >> l.call 1
      ArgumentError: wrong number of arguments (1 for 3)

section.center data-background="#000"
  p.white Next stop

section.center data-background="#000"
  p.white Functional programming and Enumerable

section.center data-background="#000"
  p.white Enumerable#what

section.center data-background="#000"
  blockquote.white PATIENCE YOU MUST HAVE my young padawan.
  p.white Radoslav Georgiev

section.center
  img.inline src="img/troll.png"

