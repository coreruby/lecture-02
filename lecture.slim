section.center data-background="#000"
  h1.white Methods & Standard Types

section
  h2 Prelude
  p We have a facebook group!

section
  h2 Prelude
  p Which is really funny, cause I ain't got one

section.center
  img.inline src="img/troll.png"

section
  h2 Prelude
  p The class has a website
  p: a href="http://coreruby.github.io" http://coreruby.github.io

section
  h2 Prelude
  p The first lecture is already online
  ul
    li: a href="http://coreruby.github.io/lecture-01" http://coreruby.github.io/lecture-01

section
  h2 Prelude
  p The website and the lectures are open source
  ul
    li: a href="https://github.com/coreruby" https://github.com/coreruby

section.center
  p I need your help

section
  h2 Prelude
  p Send a pull request for a typo

section
  h2 Prelude
  p Send a pull request for a better explanation

section
  h2 Prelude
  p Send a pull request for everything

section.center data-background="#000"
  p: img.inline src="https://avatars1.githubusercontent.com/u/8987550?v=2&s=256"

section
  h2 Method
  p Defined by the keyword def
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
      end

section
  h2 Method
  p Returns a value
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
        return :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Returns a value early
  pre: code.ruby
    '
      def eat(food)
        return :oh_well if food == :potato

        3.times { nom }
        return :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Returns a value implicitly
  pre: code.ruby
    '
      def eat(food)
        3.times { nom }
        :delicious
      end

      >> eat(:stake)
      => :delicious

section
  h2 Method
  p Always returns a value
  pre: code.ruby
    '
      def nothing
      end

      >> nothing
      => nil

section
  h2 Method
  p Can take no arguments
  pre: code.ruby
    '
      def make_some_noise
        scream
        shout
        let_it_all_out
      end

      >> make_some_noise
      => :it_sounds_like_a_cheesy_pop_song_broski

section
  h2 Method
  p Can take many arguments
  pre: code.ruby
    '
      def eat(first, second, third)
        nom first
        nom second
        nom third
      end

section
  h2 Method
  p Can take any arguments
  pre: code.ruby
    '
      def eat(*meals)
        meals.each { |meal| nom meal }
      end

      >> eat(:breakfast, :lunch, :dunner)
      => [:breakfast, :lunch, :dinner]

      >> eat(:breakfast)
      => [:breakfast,]

section
  h2 Method
  p meals is an Array of the given arguments
  pre: code.ruby
    '
      def eat(*meals)
        meals.each { |meal| nom meal }
      end

      >> eat(:breakfast, :lunch, :dunner)
      => [:breakfast, :lunch, :dinner]

      >> eat(:breakfast)
      => [:breakfast,]

section.center data-background="#000"
  p.white The name comes from the squashed-bug appearance on many early line printers

section.center data-background="#000"
  p.white True story

section.center data-background="#000"
  p.white Глей с'я ко стаа

section.center data-background="#000"
  p.white БРАТ

section
  h2 Method
  p The splat operator can get a little weird
  pre: code.ruby
    '
      def eat(first, *rest)
        nom first
        rest.each { |meal| nom meal }
      end

section
  h2 Method
  p Well, that's not so weird
  pre: code.ruby
    '
      def eat(first, *rest)
        nom first
        rest.each { |meal| nom meal }
      end

      >> eat(:breakfast)
      => [:breakfast]

      >> eat(:breakfast, :lunch)
      => [:breakfast, :lunch]

section
  h2 Method
  p Well, look at this
  pre.fragment: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatos, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p Not so weird?
  pre: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatos, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p Okay, okay, okay
  pre: code.ruby
    '
      def eat(*everything_but, the_last_one)
        everything_but.each { |meal| nom meal }
        squash_with_your_face the_last_one
      end

      >> eat(:potatos, :chicken, :meatballs, :ice_cream)
      => 0xDEADBEEF

      >> eat(:кифтета)
      => 0xDEADBEEF

section
  h2 Method
  p You asked for it
  pre: code.ruby
    '
      def eat(first, *in_between, last)
        gently_taste first
        in_between.each { |meal| nom meal }
        squash_with_your_face last
      end

      >> eat(:potatos, :ice_cream)
      => ???

section.center data-background="#000"
  blockquote.white With powerful operators come messy semantics.
  p.white Benjamin Franklin
